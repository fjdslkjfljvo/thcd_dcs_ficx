import pandas as pd
import numpy as np

def alice_strat(state_var, prev_fills, curr_bbo_info):


    coef = [[-0.7188483239556117, 0.010901776085869563, -0.0006328359762789832, 0.000561065044186296, -0.4497651634453357, 0.02213100464555035, -0.005283894532568928, 0.004834173590827603, -0.23526185885628692, 0.032221156171144474, -0.0031303743292175413, 0.0012404854648495334, -0.06458375700179084, 0.04610782471900584, 0.004675635931071243, -0.003596873454856139, 0.06812297794566947, 0.072995846704406, -0.0010831311191177992, -0.002980180145479264, 0.16135038210451458, 0.07787167102219117, -0.007906079636590607, -0.007311282074882775, 0.20943198804618063, 0.08904326601735198, 0.000838012593953217, 0.0009143480505533873, 0.23361190470556373, 0.0834509373880746, 0.0015165949251101023, 0.002177812813281126, 0.20616651178319023, 0.06663521182104347, 0.0028781341497414984, 7.161151399256871e-05, 0.12925341644359017, 0.03895963042162065, 0.0003644972431904905, 0.0008455646024733395], [-0.022489646415886418, -0.6913402079495848, 0.003040886182130767, 0.005912265833393491, -0.02568035630925322, -0.429280526945938, 0.0016989306800765428, -0.0008724389942025456, -0.03708781226154722, -0.2213062592779064, 0.006358190711187389, -0.005270776850612671, -0.050623852633889646, -0.04412549402430659, -0.00030670827626698205, 0.002259611555281029, -0.06251722417656148, 0.08565246180019721, 0.0015560876750475162, 0.0023393611301052793, -0.06990040693031549, 0.1667069704622848, -0.001196828497392026, 0.000518090756258735, -0.08154288479839948, 0.20599388199061333, 0.0011712029734773153, 0.0020871964883193354, -0.07381902788526, 0.20767630895439865, -0.00019769210999852815, -0.00038003564403707435, -0.052252897425753196, 0.18766403779326868, 0.004612912760536612, -0.0025356436078112065, -0.027698586975213192, 0.11788253156065392, -0.000743451403557361, -0.0033102073476645377], [-0.0029047983110511502, -0.008283432450550758, -0.2900030091694549, 0.03544561037489359, -0.010392464812315927, -0.014382892978055527, -0.09850485300280794, 0.008813284980625533, 0.00196082000359244, 0.007935542090538166, -0.059948962345688764, -0.007535358796839467, 0.010427795277441424, 0.0015411158637137117, -0.04335517969929207, -0.016846054566620677, -0.008449892236254197, 0.0031805276033349747, -0.04417171440041696, -0.01732678066421753, -0.008345702362227462, -0.008670149810339584, -0.03888990508034154, -0.010188986764929076, -0.0009676155236550686, 0.0008870705693701216, -0.0338223429935303, -0.01784179502388107, -0.013356408825921824, 0.0060123921932114036, -0.035390830057603795, -0.017826492358052035, 0.0031850626094956373, -0.005844441096683175, -0.039025360008946526, -0.022721881478564576, 0.0111855045201061, 0.0020955299833622953, -0.027768730172208028, -0.01197882530026637], [-0.0076474511862860434, -0.019330192118421588, 0.035976428068164534, -0.21181261360342493, -0.003848685289565309, -0.02687443854674984, -0.00025268774878232193, -0.060502734947312876, 0.015218586674484565, -0.01588783592417646, -0.019988573552431072, -0.02703935914109268, 0.01638365059984665, -0.007383799899953621, -0.03272667877307559, -0.026983688511996926, -0.0017803317278489849, 0.005435359512214105, -0.02518666849876821, -0.020393989958207653, -0.00942229553420131, 0.0032364214954672737, -0.032894793063247614, -0.015539613544870831, -0.004270102921761452, 0.019003172706077202, -0.02546971948256706, -0.0189505420927699, -0.01981235942991288, -0.0019093544343719892, -0.029658516377307338, -0.012813743073761425, -0.0053884567642736025, 0.0033789966894935616, -0.034715845643274706, -0.02104634758926645, -0.012284137506837023, 0.00504087416413424, -0.01748224574495913, -0.012719013749103383]]

    #####
    
    factor=[10,10,10,10]
    lags=10
    n=len(curr_bbo_info)
    # four numpy arrays
    mid, hbas, bid_sz, ask_sz = np.array(list(zip(*curr_bbo_info)))

    ######

    if not state_var:
        vtime=0
        pos = np.array([0.]*n)
        cum_impacts = np.array([0.]*n)
        features = np.zeros( lags*n )
        last_mid = mid.copy()
        xtx=np.zeros( (len(features), len(features)) )
        xty=np.zeros( (len(features), n) )
    else:
        vtime = state_var[0]
        pos = state_var[1].copy()
        cum_impacts = state_var[2].copy()
        features = state_var[3].copy()
        last_mid = state_var[4].copy()
        xtx = state_var[5].copy()
        xty = state_var[6].copy()
        #
        lx=features.copy()
        ly=np.log(mid/last_mid)
        xtx=xtx+np.outer(lx,lx)
        xty=xty+np.outer(lx,ly)
        #
        vtime = vtime+1
        fill_size, avg_price = np.array(list(zip(*prev_fills)))
        pos = pos + fill_size
        this_del = np.log(mid/last_mid)
        features = np.hstack( [  this_del, features[:-n],    ] )
        last_mid = mid.copy()
        #
    beta=np.matmul( np.linalg.inv(xtx+0.01*np.eye(xtx.shape[0])),xty  )
        
    state_var = [vtime, pos, cum_impacts, features, last_mid, xtx, xty]
    #

    vday, vhour,vminute = (vtime//120)//24, (vtime//120)%24, vtime%120

    ######

    
    impact_decay =0.98 # impact decays by this factor after each round
    max_size = [500, 500, 1000, 150] # size submitted will be capped at max size
    max_pos = [1000, 1000, 1000, 150] # pos will be capped at max pos

    #
    arrhigh = np.zeros(n)
    arrlow = np.zeros(n)
    for i in range(n):
        arrhigh[i] = min( max_pos[i] - pos[i], max_size[i] )
        arrlow[i] = max(  -max_pos[i] - pos[i], -max_size[i]  )
        
    ######

    pred = np.matmul( features , beta )
    
    pred_move = ( np.exp( pred ) - 1.0 )*mid
    
    ######

    decision = [0.0] * n
    
    new_pos = np.zeros(n)
    for i in range(n):
        if pred_move[i]>0:
            new_pos_i = ( pred_move[i]-2e-4 )/1e-4
            new_pos_i*=factor[i]
            new_pos_i = max(max(new_pos_i,0),pos[i])
        else:
            new_pos_i = ( pred_move[i]+2e-4 )/1e-4
            new_pos_i*=factor[i]
            new_pos_i = min(min(new_pos_i,0),pos[i])
        new_pos[i]=new_pos_i
        decision[i]=new_pos[i]-pos[i]
    
    ######
    ######
    for i in range(n):
        decision[i]=max( arrlow[i], min(arrhigh[i], decision[i]) )

    ######
    return state_var, decision

def alice_old1_strat(state_var, prev_fills, curr_bbo_info):


    coef = [[-0.7188483239556117, 0.010901776085869563, -0.0006328359762789832, 0.000561065044186296, -0.4497651634453357, 0.02213100464555035, -0.005283894532568928, 0.004834173590827603, -0.23526185885628692, 0.032221156171144474, -0.0031303743292175413, 0.0012404854648495334, -0.06458375700179084, 0.04610782471900584, 0.004675635931071243, -0.003596873454856139, 0.06812297794566947, 0.072995846704406, -0.0010831311191177992, -0.002980180145479264, 0.16135038210451458, 0.07787167102219117, -0.007906079636590607, -0.007311282074882775, 0.20943198804618063, 0.08904326601735198, 0.000838012593953217, 0.0009143480505533873, 0.23361190470556373, 0.0834509373880746, 0.0015165949251101023, 0.002177812813281126, 0.20616651178319023, 0.06663521182104347, 0.0028781341497414984, 7.161151399256871e-05, 0.12925341644359017, 0.03895963042162065, 0.0003644972431904905, 0.0008455646024733395], [-0.022489646415886418, -0.6913402079495848, 0.003040886182130767, 0.005912265833393491, -0.02568035630925322, -0.429280526945938, 0.0016989306800765428, -0.0008724389942025456, -0.03708781226154722, -0.2213062592779064, 0.006358190711187389, -0.005270776850612671, -0.050623852633889646, -0.04412549402430659, -0.00030670827626698205, 0.002259611555281029, -0.06251722417656148, 0.08565246180019721, 0.0015560876750475162, 0.0023393611301052793, -0.06990040693031549, 0.1667069704622848, -0.001196828497392026, 0.000518090756258735, -0.08154288479839948, 0.20599388199061333, 0.0011712029734773153, 0.0020871964883193354, -0.07381902788526, 0.20767630895439865, -0.00019769210999852815, -0.00038003564403707435, -0.052252897425753196, 0.18766403779326868, 0.004612912760536612, -0.0025356436078112065, -0.027698586975213192, 0.11788253156065392, -0.000743451403557361, -0.0033102073476645377], [-0.0029047983110511502, -0.008283432450550758, -0.2900030091694549, 0.03544561037489359, -0.010392464812315927, -0.014382892978055527, -0.09850485300280794, 0.008813284980625533, 0.00196082000359244, 0.007935542090538166, -0.059948962345688764, -0.007535358796839467, 0.010427795277441424, 0.0015411158637137117, -0.04335517969929207, -0.016846054566620677, -0.008449892236254197, 0.0031805276033349747, -0.04417171440041696, -0.01732678066421753, -0.008345702362227462, -0.008670149810339584, -0.03888990508034154, -0.010188986764929076, -0.0009676155236550686, 0.0008870705693701216, -0.0338223429935303, -0.01784179502388107, -0.013356408825921824, 0.0060123921932114036, -0.035390830057603795, -0.017826492358052035, 0.0031850626094956373, -0.005844441096683175, -0.039025360008946526, -0.022721881478564576, 0.0111855045201061, 0.0020955299833622953, -0.027768730172208028, -0.01197882530026637], [-0.0076474511862860434, -0.019330192118421588, 0.035976428068164534, -0.21181261360342493, -0.003848685289565309, -0.02687443854674984, -0.00025268774878232193, -0.060502734947312876, 0.015218586674484565, -0.01588783592417646, -0.019988573552431072, -0.02703935914109268, 0.01638365059984665, -0.007383799899953621, -0.03272667877307559, -0.026983688511996926, -0.0017803317278489849, 0.005435359512214105, -0.02518666849876821, -0.020393989958207653, -0.00942229553420131, 0.0032364214954672737, -0.032894793063247614, -0.015539613544870831, -0.004270102921761452, 0.019003172706077202, -0.02546971948256706, -0.0189505420927699, -0.01981235942991288, -0.0019093544343719892, -0.029658516377307338, -0.012813743073761425, -0.0053884567642736025, 0.0033789966894935616, -0.034715845643274706, -0.02104634758926645, -0.012284137506837023, 0.00504087416413424, -0.01748224574495913, -0.012719013749103383]]

    #####
    
    factor=[10,10,10,10]
    lags=10
    n=len(curr_bbo_info)
    # four numpy arrays
    mid, hbas, bid_sz, ask_sz = np.array(list(zip(*curr_bbo_info)))

    ######

    if not state_var:
        vtime=0
        pos = np.array([0.]*n)
        cum_impacts = np.array([0.]*n)
        features = np.zeros( lags*n )
        last_mid = mid.copy()
    else:
        vtime = state_var[0]
        pos = state_var[1].copy()
        cum_impacts = state_var[2].copy()
        features = state_var[3].copy()
        last_mid = state_var[4].copy()
        #
        vtime = vtime+1
        fill_size, avg_price = np.array(list(zip(*prev_fills)))
        pos = pos + fill_size
        this_del = np.log(mid/last_mid)
        features = np.hstack( [  this_del, features[:-n],    ] )
        last_mid = mid.copy()
        
    state_var = [vtime, pos, cum_impacts, features, last_mid]
    #

    vday, vhour,vminute = (vtime//120)//24, (vtime//120)%24, vtime%120

    ######

    
    impact_decay =0.98 # impact decays by this factor after each round
    max_size = [500, 500, 1000, 150] # size submitted will be capped at max size
    max_pos = [1000, 1000, 1000, 150] # pos will be capped at max pos

    #
    arrhigh = np.zeros(n)
    arrlow = np.zeros(n)
    for i in range(n):
        arrhigh[i] = min( max_pos[i] - pos[i], max_size[i] )
        arrlow[i] = max(  -max_pos[i] - pos[i], -max_size[i]  )
        
    ######

    lst_pred=[]
    for i in range(n):
        now_pred=0.0
        for j in range(len(coef[i])):
            now_pred=now_pred+coef[i][j]*features[j]
        lst_pred.append(now_pred)

    pred = np.array( lst_pred )
    
    pred_move = ( np.exp( pred ) - 1.0 )*mid
    
    ######

    decision = [0.0] * n
    
    new_pos = np.zeros(n)
    for i in range(n):
        if pred_move[i]>0:
            new_pos_i = ( pred_move[i]-2e-4 )/1e-4
            new_pos_i*=factor[i]
            new_pos_i = max(max(new_pos_i,0),pos[i])
        else:
            new_pos_i = ( pred_move[i]+2e-4 )/1e-4
            new_pos_i*=factor[i]
            new_pos_i = min(min(new_pos_i,0),pos[i])
        new_pos[i]=new_pos_i
        decision[i]=new_pos[i]-pos[i]
    
    ######
    ######
    for i in range(n):
        decision[i]=max( arrlow[i], min(arrhigh[i], decision[i]) )

    ######
    return state_var, decision



def alice_5_strat(state_var, prev_fills, curr_bbo_info):


    num_lags = [10, 10, 10, 10]
    coef = [[-0.5823063360920407, 0.06358473814238058, -0.002352940532019413, 0.001045412529136158, -0.22169633926565596, 0.12093153381408468, -0.006466063527505497, -0.0048112944081081235, 0.07532775854842144, 0.16903750931604486, -0.005376539578941197, -0.0019341064696594397, 0.30969201421382847, 0.20696125053229392, -0.0022955716496897947, 0.004891664122625334, 0.47351864366713986, 0.22693145940644702, -0.003666281716434927, 0.0017718749095912178, 0.5617038186508428, 0.24471501559525063, -0.005038212910917089, -0.000217878718088367, 0.58297010928792, 0.23626201271851166, 0.0011095861578532822, 0.0006364319217189772, 0.5413574374141419, 0.21394933523116896, -0.0002885948209551855, 0.003639622799216335, 0.4261499097059581, 0.16428036871153429, -0.0009019527738283741, 0.0031952141010928013, 0.25020838534452317, 0.09338081527709227, 0.004351980316854528, 0.000605624811986428], [-0.05178973229193722, -0.5692758105301544, 0.0009452506540397485, -0.002300191531235944, -0.09720338696005226, -0.20674260332852573, 0.00016154223604055674, -0.0012483224173348312, -0.14897882260355055, 0.07214272104843743, 0.0017710651085422167, -0.002377523877138146, -0.19566020521875543, 0.29767023352637084, -0.0024039093036933557, 0.004174802592842492, -0.22158816377043897, 0.46094567497060196, -0.0016503703382994652, 0.00572038487820342, -0.2383228454830141, 0.545781306636153, -0.006202318070422784, 0.006648237038876811, -0.23378100412336614, 0.5777252727281542, -0.003944002560988463, 0.0014572727682275566, -0.22377890186157876, 0.5394788885332436, 0.0004446988136940616, -0.0017109873068412908, -0.1745126811992801, 0.43474811658228724, -0.0031332513843456856, 0.000990580732131833, -0.10065402404877724, 0.24638818850268557, -0.006299700382066097, -0.0007842103208891358], [0.0037766979386858524, 0.0063693364565235305, -0.36485949490299174, -0.008479323723628916, 0.0086948315184848, 0.0070891921396224866, -0.20144595973271276, -0.04838170255742881, 0.015700773895433225, 0.006789971085552477, -0.1696859146402489, -0.05493868875976879, 0.0160922625942356, 0.009927353904497454, -0.1549538786313163, -0.06696319654585847, 0.006058828701420054, -0.0015506542734875768, -0.1470501500014924, -0.07795412156541406, -0.019241790548529626, -0.013525783783073222, -0.15231649453177545, -0.07015448328128371, -0.036079218428138174, 0.0027530032190202823, -0.13040064808063695, -0.07586840731668, -0.03153860443078075, 0.002238968902375579, -0.1339622699656739, -0.08307545440592116, -0.015771148101668863, -0.007752350014785556, -0.12639436754817823, -0.08531015767804967, -0.0038641473658017583, 0.004522604048446528, -0.11583796743521546, -0.05744248883249148], [-0.01079018628119979, -0.03616950470938454, -0.04811337557430818, -0.26421411625942487, -0.023876554271884193, -0.03312151061946658, -0.09978786590658688, -0.11742832782008585, -0.03412418195068948, -0.01679138222948881, -0.12420082860572437, -0.0908988180399072, -0.03335889227018059, -0.024770796389420334, -0.13609330434444558, -0.08014960710113816, -0.01671978689241221, -0.013938611127957188, -0.14334992310949007, -0.0825862816526048, -0.04457322144811685, 0.004003837220311911, -0.15030242705937566, -0.0609854365218885, -0.02567292489905465, 0.03538213017156508, -0.1423415522827229, -0.07909187542219397, -0.018295425658970365, 0.016957122445838406, -0.139001493259603, -0.0745755472028658, 0.005928508292655049, -0.009606218442592953, -0.13067788519666926, -0.0751711422169814, 0.028739226704504697, 0.005204563287334306, -0.1076089779480942, -0.06450429064188275]]

    #####
    
    factor=[10,10,10,10]
    lags=10
    n=len(curr_bbo_info)
    # four numpy arrays
    mid, hbas, bid_sz, ask_sz = np.array(list(zip(*curr_bbo_info)))

    ######

    if not state_var:
        vtime=0
        pos = np.array([0.]*n)
        cum_impacts = np.array([0.]*n)
        last_dels = np.zeros( (lags,n) )
        last_mid = mid.copy()
    else:
        vtime = state_var[0]
        pos = state_var[1].copy()
        cum_impacts = state_var[2].copy()
        last_dels = state_var[3].copy()
        last_mid = state_var[4].copy()
        #
        vtime = vtime+1
        fill_size, avg_price = np.array(list(zip(*prev_fills)))
        pos = pos + fill_size
        this_del = np.log(mid/last_mid)
        last_dels = np.vstack( [  this_del, last_dels[:-1,:],    ] )
        last_mid = mid.copy()
        
    state_var = [vtime, pos, cum_impacts, last_dels, last_mid]
    #

    vday, vhour,vminute = (vtime//120)//24, (vtime//120)%24, vtime%120

    ######

    
    impact_decay =0.98 # impact decays by this factor after each round
    max_size = [500, 500, 1000, 150] # size submitted will be capped at max size
    max_pos = [1000, 1000, 1000, 150] # pos will be capped at max pos

    #
    arrhigh = np.zeros(n)
    arrlow = np.zeros(n)
    for i in range(n):
        arrhigh[i] = min( max_pos[i] - pos[i], max_size[i] )
        arrlow[i] = max(  -max_pos[i] - pos[i], -max_size[i]  )
        
    ######

    lst_pred=[]
    for i in range(n):
        now_pred=0.0
        cnt=0
        for j in range(num_lags[i]):
            for k in range(n):
                now_pred=now_pred+coef[i][cnt]*last_dels[j][k]
                cnt=cnt+1
        lst_pred.append(now_pred)

    pred = np.array( lst_pred )
    
    pred_move = ( np.exp( pred ) - 1.0 )*mid
    
    ######

    decision = [0.0] * n
    
    new_pos = np.zeros(n)
    for i in range(n):
        if pred_move[i]>0:
            new_pos_i = ( pred_move[i]-2e-4 )/1e-4
            new_pos_i*=factor[i]
            new_pos_i = max(max(new_pos_i,0),pos[i])
        else:
            new_pos_i = ( pred_move[i]+2e-4 )/1e-4
            new_pos_i*=factor[i]
            new_pos_i = min(min(new_pos_i,0),pos[i])
        new_pos[i]=new_pos_i
        decision[i]=new_pos[i]-pos[i]
    
    ######
    ######
    for i in range(n):
        decision[i]=max( arrlow[i], min(arrhigh[i], decision[i]) )

    ######
    return state_var, decision



def alice_simple_strat(state_var, prev_fills, curr_bbo_info):


    #####
    
    factor=[10,10,10,10]
    lags=10
    n=len(curr_bbo_info)
    # four numpy arrays
    mid, hbas, bid_sz, ask_sz = np.array(list(zip(*curr_bbo_info)))

    ######

    if not state_var:
        vtime=0
        pos = np.array([0.]*n)
        cum_impacts = np.array([0.]*n)
        last_dels = np.zeros( (lags,n) )
        last_mid = mid.copy()
    else:
        vtime = state_var[0]
        pos = state_var[1].copy()
        cum_impacts = state_var[2].copy()
        last_dels = state_var[3].copy()
        last_mid = state_var[4].copy()
        #
        vtime = vtime+1
        fill_size, avg_price = np.array(list(zip(*prev_fills)))
        pos = pos + fill_size
        this_del = np.log(mid/last_mid)
        last_dels = np.vstack( [  this_del, last_dels[:-1,:],    ] )
        last_mid = mid.copy()
        
    state_var = [vtime, pos, cum_impacts, last_dels, last_mid]
    #

    vday, vhour,vminute = (vtime//120)//24, (vtime//120)%24, vtime%120

    ######

    
    impact_decay =0.98 # impact decays by this factor after each round
    max_size = [500, 500, 1000, 150] # size submitted will be capped at max size
    max_pos = [1000, 1000, 1000, 150] # pos will be capped at max pos

    #
    arrhigh = np.zeros(n)
    arrlow = np.zeros(n)
    for i in range(n):
        arrhigh[i] = min( max_pos[i] - pos[i], max_size[i] )
        arrlow[i] = max(  -max_pos[i] - pos[i], -max_size[i]  )
        
    ######


    decision = [0.0] * n
    mean = [ 99.99990317,  99.99837184, 100.97479159, 101.47371969]
    std = [0.73413634, 0.73520834, 0.6112516 , 0.88995665]
    for i in range(n):
        if mid[i]>mean[i]+std[i]:
            decision[i]=-10000
        elif mid[i]<mean[i]-std[i]:
            decision[i]=10000
        elif pos[i]>0 and mid[i]>mean[i]:
            decision[i]=-pos[i]
        elif pos[i]<0 and mid[i]<mean[i]:
            decision[i]=-pos[i]
    
    ######
    ######
    for i in range(n):
        decision[i]=max( arrlow[i], min(arrhigh[i], decision[i]) )

    ######
    return state_var, decision